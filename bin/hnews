#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility

require 'hn'
require 'paint'
require 'json'
require 'launchy'



unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'hnews_version'

include GLI

program_desc 'Hacker News CLI'

version HNews::VERSION

desc 'Get Best Items'
arg_name 'none'
command :best do |c|
  c.action do |global_options,options,args|

    hnData = HackerNews::Engine.best
    cachePage hnData
    genericRender hnData

  end
end

desc 'Get Home Items'
arg_name 'none'
command :home do |c|
  c.action do |global_options,options,args|

    hnData = HackerNews::Engine.homepage
    cachePage hnData
    genericRender hnData

  end
end

desc 'Get New Items'
arg_name 'pageNumber'
command :new do |c|
  c.action do |global_options,options,args|
    hnData = HackerNews::Engine.newest
    cachePage hnData
    genericRender hnData
  end
end

desc 'Upvote Item from last Loaded Page'
arg_name 'lastPageItemID'
command :upvote do |c|
  c.action do |global_options,options,args|
  end
end

desc 'Open Item from last Loaded Page'
arg_name 'lastPageItemID'
command :open do |c|
  c.action do |global_options,options,args|
    cachedPage = getCachedPage()

    puts "Opening: " + cachedPage[Integer(args[0])]['link']
    Launchy.open(cachedPage[Integer(args[0])]['link'])
  end
end

desc 'Open Comments Page from last loaded page'
arg_name 'lastPageItemID'
command :comments do |c|
  c.action do |global_options,options,args|
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

# Our Stuff
def cachePage (itemArray)
  itemCount = 1
  toSave = []
  cacheVars = ['title', 'link', 'siteline', 'site', 'points', 'username', 'num_comments', 'time_string', 'id']
  itemArray.each do |item|

    toSave[itemCount] = {}

    cacheVars.each do |cacheVar|
      if defined? item[cacheVar]
        toSave[itemCount][cacheVar] = item[cacheVar]
      end
    end

    itemCount = itemCount + 1
  end

  File.open(File.expand_path("~/.hnews.cache"),"w") do |f|
    f.write(toSave.to_json)
  end

end

def getCachedPage ()
  File.open(File.expand_path("~/.hnews.cache"),"r") do |f|
    return JSON.parse(f.read)
  end
end

def genericRender (hnData)
  count = 1
  hnDataHighestNum = hnData.length
  highestNumLen = hnDataHighestNum.to_s().length
  line = []
  cachePage(hnData)
  hnData.each do |item|

    line[1] =  Paint['[' + count.to_s() + ']', :yellow]
    for i in -1...highestNumLen - count.to_s().length
      line[1] = line[1] + ' '
    end

    line[1] = line[1] + Paint[item.title, :white]

    if defined? item.siteline
      line[1] = line[1] + ' ' + Paint['(' + item.site + ')', "666"]
    end

    puts line[1]

    line[2] = ''
    for i in -3...highestNumLen
      line[2] = line[2] + ' '
    end

    line[2] = line[2] + Paint[item.points.to_s() + ' points by ' + item.username.to_s() + ' | ' + item.num_comments.to_s() + ' comments ' + item.time_string.to_s(), "666"]
    line[2] = line[2] + ' ' + Paint['https://news.ycombinator.com/item?id=' + item.id.to_s, "000"]
    puts line[2]
    count = count + 1
  end
end

exit GLI.run(ARGV)
